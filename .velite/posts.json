[{"slug":"post/neo4j","lastModified":"2025-04-25T04:53:18.453Z","metadata":{"readingTime":4,"wordCount":981.6400000000001},"excerpt":"neo4j\n介绍\nNeo4j 是一个图形数据库，它使用图形结构来存储数据。数据通过节点（nodes）、关系（relationships）和属性（properties）来表示。Python 中可以通过 neo4j 驱动来与 Neo4j 数据库进行交互，本教程将向你展示如何在 Python 中使用 Neo4j 驱动进行基础操作。\n1. 安装和配置\n安装 Neo4j Python 驱动\n首先，确保你已经安装了 Neo4j 数据库，并且已经运行它。然后，你需要安装 Neo4j 的 Python 驱动。\npip instal","content":"<h1>neo4j</h1>\n<h2>介绍</h2>\n<p>Neo4j 是一个图形数据库，它使用图形结构来存储数据。数据通过节点（nodes）、关系（relationships）和属性（properties）来表示。Python 中可以通过 <strong>neo4j</strong> 驱动来与 Neo4j 数据库进行交互，本教程将向你展示如何在 Python 中使用 Neo4j 驱动进行基础操作。</p>\n<h2><strong>1. 安装和配置</strong></h2>\n<h3><strong>安装 Neo4j Python 驱动</strong></h3>\n<p>首先，确保你已经安装了 Neo4j 数据库，并且已经运行它。然后，你需要安装 Neo4j 的 Python 驱动。</p>\n<pre><code class=\"language-shell\">pip install neo4j\n</code></pre>\n<h3><strong>连接到 Neo4j 数据库</strong></h3>\n<p>连接到 Neo4j 数据库需要提供数据库的 URI、用户名和密码。通常使用 bolt 协议来连接 Neo4j，默认端口为 7687。</p>\n<pre><code class=\"language-python\">from neo4j import GraphDatabase\n\n# 创建 Neo4j 驱动实例\nuri = \"bolt://localhost:7687\"  # Neo4j URI\nusername = \"neo4j\"  # Neo4j 默认用户名\npassword = \"your_password\"  # 密码\ndriver = GraphDatabase.driver(uri, auth=(username, password))\n</code></pre>\n<h2><strong>2. 节点的基础操作</strong></h2>\n<h3><strong>创建节点</strong></h3>\n<p>节点是图数据库的基本元素之一，你可以通过 Cypher 查询语言创建节点，并为其设置属性。</p>\n<pre><code class=\"language-python\">def create_node(tx, node_id, label):\n    query = \"CREATE (n:Animal {custom_id: $node_id, label: $label})\"\n    tx.run(query, node_id=node_id, label=label)\n\n# 执行创建节点\nwith driver.session() as session:\n    session.write_transaction(create_node, \"unique_id_1\", \"Mammal\")\n    print(\"Node created.\")\n\n# 关闭驱动\ndriver.close()\n</code></pre>\n<h3><strong>查询节点</strong></h3>\n<p>你可以使用 MATCH 查询来查找符合条件的节点。</p>\n<pre><code class=\"language-python\">def get_node(tx, node_id):\n    query = \"MATCH (n:Animal {custom_id: $node_id}) RETURN n\"\n    result = tx.run(query, node_id=node_id)\n    for record in result:\n        print(record[\"n\"])\n\n# 执行查询\nwith driver.session() as session:\n    session.read_transaction(get_node, \"unique_id_1\")\n</code></pre>\n<h3><strong>更新节点</strong></h3>\n<p>更新节点的属性时，可以使用 SET 语句。</p>\n<pre><code class=\"language-python\">def update_node(tx, node_id, new_label):\n    query = \"MATCH (n:Animal {custom_id: $node_id}) SET n.label = $new_label\"\n    tx.run(query, node_id=node_id, new_label=new_label)\n\n# 执行更新\nwith driver.session() as session:\n    session.write_transaction(update_node, \"unique_id_1\", \"Dog\")\n</code></pre>\n<h3><strong>删除节点</strong></h3>\n<p>删除节点时，需要使用 DETACH DELETE，确保删除该节点及其所有关系。</p>\n<pre><code class=\"language-python\">def delete_node(tx, node_id):\n    query = \"MATCH (n:Animal {custom_id: $node_id}) DETACH DELETE n\"\n    tx.run(query, node_id=node_id)\n\n# 执行删除\nwith driver.session() as session:\n    session.write_transaction(delete_node, \"unique_id_1\")\n    print(\"Node deleted.\")\n</code></pre>\n<h2><strong>3. 关系的基础操作</strong></h2>\n<h3><strong>创建关系</strong></h3>\n<p>创建关系时，你需要指定关系的类型，并连接两个节点。</p>\n<pre><code class=\"language-python\">def create_relationship(tx, node1_id, node2_id):\n    query = \"\"\"\n    MATCH (a:Animal {custom_id: $node1_id}), (b:Animal {custom_id: $node2_id})\n    CREATE (a)-[:KNOWS]->(b)\n    \"\"\"\n    tx.run(query, node1_id=node1_id, node2_id=node2_id)\n\n# 执行创建关系\nwith driver.session() as session:\n    session.write_transaction(create_relationship, \"unique_id_1\", \"unique_id_2\")\n</code></pre>\n<h3><strong>查询关系</strong></h3>\n<p>你可以使用 MATCH 查找关系，并指定起始和结束节点。</p>\n<pre><code class=\"language-python\">def get_relationship(tx, node1_id, node2_id):\n    query = \"\"\"\n    MATCH (a)-[r:KNOWS]->(b)\n    WHERE a.custom_id = $node1_id AND b.custom_id = $node2_id\n    RETURN r\n    \"\"\"\n    result = tx.run(query, node1_id=node1_id, node2_id=node2_id)\n    for record in result:\n        print(record[\"r\"])\n\n# 执行查询\nwith driver.session() as session:\n    session.read_transaction(get_relationship, \"unique_id_1\", \"unique_id_2\")\n</code></pre>\n<h3><strong>删除关系</strong></h3>\n<p>删除节点之间的关系时，可以使用 DELETE。</p>\n<pre><code class=\"language-python\">def delete_relationship(tx, node1_id, node2_id):\n    query = \"\"\"\n    MATCH (a)-[r]->(b)\n    WHERE a.custom_id = $node1_id AND b.custom_id = $node2_id\n    DELETE r\n    \"\"\"\n    tx.run(query, node1_id=node1_id, node2_id=node2_id)\n\n# 执行删除关系\nwith driver.session() as session:\n    session.write_transaction(delete_relationship, \"unique_id_1\", \"unique_id_2\")\n    print(\"Relationship deleted.\")\n</code></pre>\n<h2><strong>4. 创建约束和索引</strong></h2>\n<h3><strong>创建唯一约束</strong></h3>\n<p>唯一约束确保某个属性在数据库中是唯一的。</p>\n<pre><code class=\"language-python\">def create_unique_constraint(tx):\n    query = \"CREATE CONSTRAINT IF NOT EXISTS ON (n:Animal) ASSERT n.custom_id IS UNIQUE\"\n    tx.run(query)\n\n# 执行创建唯一约束\nwith driver.session() as session:\n    session.write_transaction(create_unique_constraint)\n    print(\"Unique constraint created.\")\n</code></pre>\n<h3><strong>创建存在性约束</strong></h3>\n<p>存在性约束确保节点或关系必须包含某个属性。</p>\n<pre><code class=\"language-python\">def create_existence_constraint(tx):\n    query = \"CREATE CONSTRAINT IF NOT EXISTS ON (n:Animal) ASSERT exists(n.custom_id)\"\n    tx.run(query)\n\n# 执行创建存在性约束\nwith driver.session() as session:\n    session.write_transaction(create_existence_constraint)\n    print(\"Existence constraint created.\")\n</code></pre>\n<h3><strong>创建索引</strong></h3>\n<p>索引用于提高某个属性的查询性能。</p>\n<pre><code class=\"language-python\">def create_index(tx):\n    query = \"CREATE INDEX IF NOT EXISTS FOR (n:Animal) ON (n.custom_id)\"\n    tx.run(query)\n\n# 执行创建索引\nwith driver.session() as session:\n    session.write_transaction(create_index)\n    print(\"Index created.\")\n</code></pre>\n<h2><strong>5. 复杂查询和聚合操作</strong></h2>\n<h3><strong>聚合查询</strong></h3>\n<p>Neo4j 支持多种聚合函数，比如 COUNT、SUM、AVG 等。可以用来统计节点或关系的数量。</p>\n<pre><code class=\"language-python\">def count_nodes(tx):\n    query = \"MATCH (n:Animal) RETURN COUNT(n)\"\n    result = tx.run(query)\n    for record in result:\n        print(record[\"COUNT(n)\"])\n\n# 执行聚合查询\nwith driver.session() as session:\n    session.read_transaction(count_nodes)\n</code></pre>\n<h3><strong>查询带条件的关系</strong></h3>\n<p>你可以使用条件来过滤查询结果。</p>\n<pre><code class=\"language-python\">def filter_nodes(tx):\n    query = \"MATCH (n:Animal) WHERE n.label = 'Dog' RETURN n\"\n    result = tx.run(query)\n    for record in result:\n        print(record[\"n\"])\n\n# 执行条件查询\nwith driver.session() as session:\n    session.read_transaction(filter_nodes)\n</code></pre>\n<h2><strong>6. 批量操作</strong></h2>\n<h3><strong>批量创建节点</strong></h3>\n<pre><code class=\"language-python\">def create_multiple_nodes(tx, nodes):\n    query = \"UNWIND $nodes AS node CREATE (n:Animal {custom_id: node.custom_id, label: node.label})\"\n    tx.run(query, nodes=nodes)\n\n# 执行批量创建\nnodes = [\n    {\"custom_id\": \"unique_id_1\", \"label\": \"Dog\"},\n    {\"custom_id\": \"unique_id_2\", \"label\": \"Cat\"},\n    {\"custom_id\": \"unique_id_3\", \"label\": \"Fox\"}\n]\nwith driver.session() as session:\n    session.write_transaction(create_multiple_nodes, nodes)\n</code></pre>\n<h2><strong>7. 关闭连接</strong></h2>\n<p>完成操作后，关闭连接：</p>\n<pre><code class=\"language-python\"># 关闭驱动\ndriver.close()\n</code></pre>","code":"const{Fragment:n,jsx:e,jsxs:i}=arguments[0];function _createMdxContent(r){const d={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",strong:\"strong\",...r.components};return i(n,{children:[e(d.h1,{children:\"neo4j\"}),\"\\n\",e(d.h2,{children:\"介绍\"}),\"\\n\",i(d.p,{children:[\"Neo4j 是一个图形数据库，它使用图形结构来存储数据。数据通过节点（nodes）、关系（relationships）和属性（properties）来表示。Python 中可以通过 \",e(d.strong,{children:\"neo4j\"}),\" 驱动来与 Neo4j 数据库进行交互，本教程将向你展示如何在 Python 中使用 Neo4j 驱动进行基础操作。\"]}),\"\\n\",e(d.h2,{children:e(d.strong,{children:\"1. 安装和配置\"})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"安装 Neo4j Python 驱动\"})}),\"\\n\",e(d.p,{children:\"首先，确保你已经安装了 Neo4j 数据库，并且已经运行它。然后，你需要安装 Neo4j 的 Python 驱动。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-shell\",children:\"pip install neo4j\\n\"})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"连接到 Neo4j 数据库\"})}),\"\\n\",e(d.p,{children:\"连接到 Neo4j 数据库需要提供数据库的 URI、用户名和密码。通常使用 bolt 协议来连接 Neo4j，默认端口为 7687。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'from neo4j import GraphDatabase\\n\\n# 创建 Neo4j 驱动实例\\nuri = \"bolt://localhost:7687\"  # Neo4j URI\\nusername = \"neo4j\"  # Neo4j 默认用户名\\npassword = \"your_password\"  # 密码\\ndriver = GraphDatabase.driver(uri, auth=(username, password))\\n'})}),\"\\n\",e(d.h2,{children:e(d.strong,{children:\"2. 节点的基础操作\"})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"创建节点\"})}),\"\\n\",e(d.p,{children:\"节点是图数据库的基本元素之一，你可以通过 Cypher 查询语言创建节点，并为其设置属性。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def create_node(tx, node_id, label):\\n    query = \"CREATE (n:Animal {custom_id: $node_id, label: $label})\"\\n    tx.run(query, node_id=node_id, label=label)\\n\\n# 执行创建节点\\nwith driver.session() as session:\\n    session.write_transaction(create_node, \"unique_id_1\", \"Mammal\")\\n    print(\"Node created.\")\\n\\n# 关闭驱动\\ndriver.close()\\n'})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"查询节点\"})}),\"\\n\",e(d.p,{children:\"你可以使用 MATCH 查询来查找符合条件的节点。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def get_node(tx, node_id):\\n    query = \"MATCH (n:Animal {custom_id: $node_id}) RETURN n\"\\n    result = tx.run(query, node_id=node_id)\\n    for record in result:\\n        print(record[\"n\"])\\n\\n# 执行查询\\nwith driver.session() as session:\\n    session.read_transaction(get_node, \"unique_id_1\")\\n'})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"更新节点\"})}),\"\\n\",e(d.p,{children:\"更新节点的属性时，可以使用 SET 语句。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def update_node(tx, node_id, new_label):\\n    query = \"MATCH (n:Animal {custom_id: $node_id}) SET n.label = $new_label\"\\n    tx.run(query, node_id=node_id, new_label=new_label)\\n\\n# 执行更新\\nwith driver.session() as session:\\n    session.write_transaction(update_node, \"unique_id_1\", \"Dog\")\\n'})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"删除节点\"})}),\"\\n\",e(d.p,{children:\"删除节点时，需要使用 DETACH DELETE，确保删除该节点及其所有关系。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def delete_node(tx, node_id):\\n    query = \"MATCH (n:Animal {custom_id: $node_id}) DETACH DELETE n\"\\n    tx.run(query, node_id=node_id)\\n\\n# 执行删除\\nwith driver.session() as session:\\n    session.write_transaction(delete_node, \"unique_id_1\")\\n    print(\"Node deleted.\")\\n'})}),\"\\n\",e(d.h2,{children:e(d.strong,{children:\"3. 关系的基础操作\"})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"创建关系\"})}),\"\\n\",e(d.p,{children:\"创建关系时，你需要指定关系的类型，并连接两个节点。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def create_relationship(tx, node1_id, node2_id):\\n    query = \"\"\"\\n    MATCH (a:Animal {custom_id: $node1_id}), (b:Animal {custom_id: $node2_id})\\n    CREATE (a)-[:KNOWS]->(b)\\n    \"\"\"\\n    tx.run(query, node1_id=node1_id, node2_id=node2_id)\\n\\n# 执行创建关系\\nwith driver.session() as session:\\n    session.write_transaction(create_relationship, \"unique_id_1\", \"unique_id_2\")\\n'})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"查询关系\"})}),\"\\n\",e(d.p,{children:\"你可以使用 MATCH 查找关系，并指定起始和结束节点。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def get_relationship(tx, node1_id, node2_id):\\n    query = \"\"\"\\n    MATCH (a)-[r:KNOWS]->(b)\\n    WHERE a.custom_id = $node1_id AND b.custom_id = $node2_id\\n    RETURN r\\n    \"\"\"\\n    result = tx.run(query, node1_id=node1_id, node2_id=node2_id)\\n    for record in result:\\n        print(record[\"r\"])\\n\\n# 执行查询\\nwith driver.session() as session:\\n    session.read_transaction(get_relationship, \"unique_id_1\", \"unique_id_2\")\\n'})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"删除关系\"})}),\"\\n\",e(d.p,{children:\"删除节点之间的关系时，可以使用 DELETE。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def delete_relationship(tx, node1_id, node2_id):\\n    query = \"\"\"\\n    MATCH (a)-[r]->(b)\\n    WHERE a.custom_id = $node1_id AND b.custom_id = $node2_id\\n    DELETE r\\n    \"\"\"\\n    tx.run(query, node1_id=node1_id, node2_id=node2_id)\\n\\n# 执行删除关系\\nwith driver.session() as session:\\n    session.write_transaction(delete_relationship, \"unique_id_1\", \"unique_id_2\")\\n    print(\"Relationship deleted.\")\\n'})}),\"\\n\",e(d.h2,{children:e(d.strong,{children:\"4. 创建约束和索引\"})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"创建唯一约束\"})}),\"\\n\",e(d.p,{children:\"唯一约束确保某个属性在数据库中是唯一的。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def create_unique_constraint(tx):\\n    query = \"CREATE CONSTRAINT IF NOT EXISTS ON (n:Animal) ASSERT n.custom_id IS UNIQUE\"\\n    tx.run(query)\\n\\n# 执行创建唯一约束\\nwith driver.session() as session:\\n    session.write_transaction(create_unique_constraint)\\n    print(\"Unique constraint created.\")\\n'})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"创建存在性约束\"})}),\"\\n\",e(d.p,{children:\"存在性约束确保节点或关系必须包含某个属性。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def create_existence_constraint(tx):\\n    query = \"CREATE CONSTRAINT IF NOT EXISTS ON (n:Animal) ASSERT exists(n.custom_id)\"\\n    tx.run(query)\\n\\n# 执行创建存在性约束\\nwith driver.session() as session:\\n    session.write_transaction(create_existence_constraint)\\n    print(\"Existence constraint created.\")\\n'})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"创建索引\"})}),\"\\n\",e(d.p,{children:\"索引用于提高某个属性的查询性能。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def create_index(tx):\\n    query = \"CREATE INDEX IF NOT EXISTS FOR (n:Animal) ON (n.custom_id)\"\\n    tx.run(query)\\n\\n# 执行创建索引\\nwith driver.session() as session:\\n    session.write_transaction(create_index)\\n    print(\"Index created.\")\\n'})}),\"\\n\",e(d.h2,{children:e(d.strong,{children:\"5. 复杂查询和聚合操作\"})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"聚合查询\"})}),\"\\n\",e(d.p,{children:\"Neo4j 支持多种聚合函数，比如 COUNT、SUM、AVG 等。可以用来统计节点或关系的数量。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def count_nodes(tx):\\n    query = \"MATCH (n:Animal) RETURN COUNT(n)\"\\n    result = tx.run(query)\\n    for record in result:\\n        print(record[\"COUNT(n)\"])\\n\\n# 执行聚合查询\\nwith driver.session() as session:\\n    session.read_transaction(count_nodes)\\n'})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"查询带条件的关系\"})}),\"\\n\",e(d.p,{children:\"你可以使用条件来过滤查询结果。\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def filter_nodes(tx):\\n    query = \"MATCH (n:Animal) WHERE n.label = \\'Dog\\' RETURN n\"\\n    result = tx.run(query)\\n    for record in result:\\n        print(record[\"n\"])\\n\\n# 执行条件查询\\nwith driver.session() as session:\\n    session.read_transaction(filter_nodes)\\n'})}),\"\\n\",e(d.h2,{children:e(d.strong,{children:\"6. 批量操作\"})}),\"\\n\",e(d.h3,{children:e(d.strong,{children:\"批量创建节点\"})}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:'def create_multiple_nodes(tx, nodes):\\n    query = \"UNWIND $nodes AS node CREATE (n:Animal {custom_id: node.custom_id, label: node.label})\"\\n    tx.run(query, nodes=nodes)\\n\\n# 执行批量创建\\nnodes = [\\n    {\"custom_id\": \"unique_id_1\", \"label\": \"Dog\"},\\n    {\"custom_id\": \"unique_id_2\", \"label\": \"Cat\"},\\n    {\"custom_id\": \"unique_id_3\", \"label\": \"Fox\"}\\n]\\nwith driver.session() as session:\\n    session.write_transaction(create_multiple_nodes, nodes)\\n'})}),\"\\n\",e(d.h2,{children:e(d.strong,{children:\"7. 关闭连接\"})}),\"\\n\",e(d.p,{children:\"完成操作后，关闭连接：\"}),\"\\n\",e(d.pre,{children:e(d.code,{className:\"language-python\",children:\"# 关闭驱动\\ndriver.close()\\n\"})})]})}return{default:function(n={}){const{wrapper:i}=n.components||{};return i?e(i,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};","permalink":"/post/neo4j"}]